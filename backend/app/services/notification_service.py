import logging
import httpx
from typing import List, Optional

from backend.app.core.config import settings

logger = logging.getLogger(__name__)

class NotificationService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ —Å–±–æ—è—Ö –∏ –≤–∞–∂–Ω—ã—Ö —Å–æ–±—ã—Ç–∏—è—Ö"""
    
    @staticmethod
    async def send_telegram_notification(message: str, admin_ids: Optional[List[int]] = None) -> bool:
        """
        –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —á–µ—Ä–µ–∑ Telegram-–±–æ—Ç–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º
        
        Args:
            message: –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
            admin_ids: –°–ø–∏—Å–æ–∫ ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ (–µ—Å–ª–∏ None, —Ç–æ –≤—Å–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º)
        
        Returns:
            bool: –£—Å–ø–µ—à–Ω–æ—Å—Ç—å –æ—Ç–ø—Ä–∞–≤–∫–∏
        """
        try:
            # –ï—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω—ã –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ–º
            if admin_ids is None:
                admin_ids = settings.get_admin_ids()
                
            if not admin_ids:
                logger.warning("–ù–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π")
                return False
                
            # –§–æ—Ä–º–∏—Ä—É–µ–º –±–∞–∑–æ–≤—ã–π URL –¥–ª—è API Telegram
            base_url = f"https://api.telegram.org/bot{settings.BOT_TOKEN}/sendMessage"
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–∞–∂–¥–æ–º—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
            async with httpx.AsyncClient() as client:
                for admin_id in admin_ids:
                    params = {
                        "chat_id": admin_id,
                        "text": f"üö® –£–í–ï–î–û–ú–õ–ï–ù–ò–ï –û –°–ë–û–ï üö®\n\n{message}",
                        "parse_mode": "HTML"
                    }
                    
                    response = await client.post(base_url, params=params)
                    
                    if response.status_code != 200:
                        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É {admin_id}: {response.text}")
                        
            return True
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {str(e)}")
            return False
    
    @staticmethod
    async def send_monitoring_error_notification(error_message: str) -> bool:
        """
        –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å–±–æ–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
        
        Args:
            error_message: –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ
            
        Returns:
            bool: –£—Å–ø–µ—à–Ω–æ—Å—Ç—å –æ—Ç–ø—Ä–∞–≤–∫–∏
        """
        message = f"<b>–°–±–æ–π –≤ —Å–∏—Å—Ç–µ–º–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∫–∞–Ω–∞–ª–æ–≤</b>\n\n"
        message += f"<i>–û–ø–∏—Å–∞–Ω–∏–µ –æ—à–∏–±–∫–∏:</i>\n{error_message}\n\n"
        message += f"<i>–í—Ä–µ–º—è:</i> {__import__('datetime').datetime.now().strftime('%Y-%m-%d %H:%M:%S')}"
        
        return await NotificationService.send_telegram_notification(message)
    
    @staticmethod
    async def send_account_error_notification(account_id: int, error_message: str) -> bool:
        """
        –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å–±–æ–µ –∞–∫–∫–∞—É–Ω—Ç–∞ Telethon
        
        Args:
            account_id: ID –∞–∫–∫–∞—É–Ω—Ç–∞
            error_message: –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ
            
        Returns:
            bool: –£—Å–ø–µ—à–Ω–æ—Å—Ç—å –æ—Ç–ø—Ä–∞–≤–∫–∏
        """
        message = f"<b>–°–±–æ–π –∞–∫–∫–∞—É–Ω—Ç–∞ Telethon</b>\n\n"
        message += f"<i>ID –∞–∫–∫–∞—É–Ω—Ç–∞:</i> {account_id}\n"
        message += f"<i>–û–ø–∏—Å–∞–Ω–∏–µ –æ—à–∏–±–∫–∏:</i>\n{error_message}\n\n"
        message += f"<i>–í—Ä–µ–º—è:</i> {__import__('datetime').datetime.now().strftime('%Y-%m-%d %H:%M:%S')}"
        
        return await NotificationService.send_telegram_notification(message)


# –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞
notification_service = NotificationService()
