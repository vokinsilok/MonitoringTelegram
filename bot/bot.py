import asyncio

from aiogram import Bot, Dispatcher
from aiogram.enums import ParseMode
from aiogram.filters import CommandStart
from aiogram.types import Message
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.client.default import DefaultBotProperties

from bot.handlers.channel import router as router_channel
from bot.handlers.keyword import router as router_keyword
from bot.handlers.operators import router as router_operators
from bot.handlers.general import router as router_general
from bot.handlers.telethon import router as router_telethon
from bot.handlers.post_processing import router as router_post_processing
from bot.handlers.bulk_import import router as router_bulk_import
from app.core.config import settings
from app.core.logging import main_logger
from bot.keyboards.keyboards import get_main_keyboard
from bot.models.user_model import UserRole
from bot.schemas.user_schema import CreateUserSchema
from bot.service.user_service import UserService
from bot.utils.depend import get_atomic_db
from bot.tasks.monitoring_tasks import start_background_tasks

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä —Å —Ö—Ä–∞–Ω–∏–ª–∏—â–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–π
storage = MemoryStorage()
bot = Bot(token=settings.BOT_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher(storage=storage)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@dp.message(CommandStart())
async def command_start_handler(message: Message) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start.
    –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –µ–≥–æ —Ä–æ–ª—å.
    """
    user_id = message.from_user.id

    async with get_atomic_db() as db:
        user_service = UserService(db)
        if not await user_service.user_in_white_list(user_id):
            main_logger.info(await user_service.user_in_white_list(user_id))
            await message.answer(
                "‚ùå <b>–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.</b>\n\n"
                "–í–∞—à Telegram ID –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –±–µ–ª–æ–º —Å–ø–∏—Å–∫–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞."
            )
            return

        user = await UserService(db).get_or_create_user(message.from_user.id, CreateUserSchema(
            telegram_id=message.from_user.id,
            username=message.from_user.username if message.from_user.username else "",
            first_name=message.from_user.first_name if message.from_user.first_name else "",
            last_name=message.from_user.last_name if message.from_user.last_name else "",
            role=UserRole.USER.value,
            is_active=True,
            is_admin=False,
            is_operator=False
        ))
        # –ø–æ–ª—É—á–∞–µ–º —è–∑—ã–∫ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        st = None
        try:
            st = await db.user.get_or_create_settings(user.id)
        except Exception:
            pass
        lang = getattr(st, "language", None)

    name = user.first_name or user.username or str(user.telegram_id)
    if user and user.role == "user":
        await message.answer(
            "üëã <b>–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {name}!</b>\n\n"
            "–Ø –≤–∞—à –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥—É Telegram‚Äë–∫–∞–Ω–∞–ª–æ–≤.\n"
            "–í–∞—à–∞ —Ä–æ–ª—å ‚Äî <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å</b>.\n\n"
            "–í—ã –º–æ–∂–µ—Ç–µ –∑–∞–ø—Ä–æ—Å–∏—Ç—å –¥–æ—Å—Ç—É–ø –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–∫–∏ \"üìù –ü–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞\" –Ω–∏–∂–µ.".format(
                name=name
            ),
            reply_markup=get_main_keyboard(lang, is_admin=False, is_operator=False)
        )
    elif user and user.role == "admin":
        await message.answer(
            "üëã <b>–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {name}!</b>\n\n"
            "–í–∞—à–∞ —Ä–æ–ª—å ‚Äî <b>–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä</b>.\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é –Ω–∏–∂–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞–º–∏, –∫–ª—é—á–µ–≤—ã–º–∏ —Å–ª–æ–≤–∞–º–∏, –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞–º–∏ –∏ Telethon‚Äë–∞–∫–∫–∞—É–Ω—Ç–∞–º–∏.".format(
                name=name
            ),
            reply_markup=get_main_keyboard(lang, is_admin=True)
        )
    elif user and user.role == "operator":
        await message.answer(
            "üëã <b>–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {name}!</b>\n\n"
            "–í–∞—à–∞ —Ä–æ–ª—å ‚Äî <b>–û–ø–µ—Ä–∞—Ç–æ—Ä</b>.\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø—Ä–µ–¥–ª–∞–≥–∞—Ç—å –∫–∞–Ω–∞–ª—ã –∏ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞, –∞ —Ç–∞–∫–∂–µ —Å–º–æ—Ç—Ä–µ—Ç—å –æ—Ç—á—ë—Ç—ã.".format(
                name=name
            ),
            reply_markup=get_main_keyboard(lang, is_operator=True)
        )
    else:
        await message.answer(
            "‚ö†Ô∏è <b>–í–∞—à–∞ —Ä–æ–ª—å –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞.</b>\n\n"
            "–í–æ–∑–º–æ–∂–Ω–æ, –≤–æ–∑–Ω–∏–∫–ª–∞ –≤—Ä–µ–º–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –∑–∞–ø—Ä–æ—Å –ø–æ–∑–∂–µ."
        )


async def main() -> None:
    """
    –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞.
    """
    main_logger.info("Configuring bot")

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ä–æ—É—Ç–µ—Ä—ã
    dp.include_router(router=router_channel)
    dp.include_router(router=router_keyword)
    dp.include_router(router=router_operators)
    dp.include_router(router=router_general)
    dp.include_router(router=router_telethon)
    dp.include_router(router_post_processing)
    dp.include_router(router=router_bulk_import)

    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏
    start_background_tasks(bot)

    main_logger.info("Starting bot")

    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())
