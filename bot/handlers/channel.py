from aiogram import Router, F, Bot
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import Message, CallbackQuery

from app.core.logging import main_logger
from bot.keyboards.keyboards import get_channel_proposal_keyboard
from bot.schemas.channel import AddChannelProposal, AddChannel
from bot.service.channel_service import ChannelService
from bot.service.user_service import UserService
from bot.utils.depend import get_atomic_db

router = Router()


class ChannelProposalForm(StatesGroup):
    """–°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Ñ–æ—Ä–º—ã –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞"""
    waiting_for_channel = State()
    waiting_for_comment = State()
    waiting_for_confirmation = State()


@router.message(F.text.startswith("üì¢ –ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å –∫–∞–Ω–∞–ª"))
async def cmd_propose_channel(message: Message, state: FSMContext):
    """–ù–∞—á–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞"""
    if not await UserService.cheek_user_permissions_static(message.from_user.id, "operator"):
        await message.answer("‚ö†Ô∏è <b>–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤</b>\n\n–≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞–º.")
        return
    await message.answer("üì¢ <b>–ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å –∫–∞–Ω–∞–ª</b>\n\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –∫–∞–Ω–∞–ª –∏–ª–∏ –µ–≥–æ @username:")
    await state.set_state(ChannelProposalForm.waiting_for_channel)


@router.message(F.text.startswith("‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª"))
async def cmd_propose_channel(message: Message, state: FSMContext):
    """–ù–∞—á–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞"""
    user_id = message.from_user.id
    if not await UserService.cheek_user_permissions_static(message.from_user.id, "admin"):
        await message.answer("‚ö†Ô∏è <b>–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤</b>\n\n–≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ admin.")
        return
    if not user_id:
        await message.answer("–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –≤–∞—à Telegram ID.")
        return

    async with get_atomic_db() as db:
        user_permissions = await UserService(db).cheek_user_permissions(user_id)

    if not user_permissions["is_admin"] and not user_permissions["is_operator"]:
        await message.answer("‚ö†Ô∏è <b>–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤</b>\n\n–≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞–º –∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.")
    elif not user_permissions["is_admin"]:
        await message.answer(
            "‚ö†Ô∏è –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –ø—Ä—è–º–æ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è.\n\n–í—ã –º–æ–∂–µ—Ç–µ <b>–ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å</b> –∫–∞–Ω–∞–ª, –∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã —Ä–∞—Å—Å–º–æ—Ç—Ä—è—Ç –∑–∞—è–≤–∫—É."
        )
    else:
        await message.answer("‚ûï <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞</b>\n\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –∫–∞–Ω–∞–ª –∏–ª–∏ –µ–≥–æ @username:")
        await state.set_state(ChannelProposalForm.waiting_for_channel)


@router.message(ChannelProposalForm.waiting_for_channel)
async def process_channel(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –∫–∞–Ω–∞–ª"""
    channel_link = message.text.strip()

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(channel_link=channel_link)

    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
    await message.answer("‚úèÔ∏è –î–æ–±–∞–≤—å—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—é (–∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ '–Ω–µ—Ç' –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞):")
    await state.set_state(ChannelProposalForm.waiting_for_comment)


@router.message(ChannelProposalForm.waiting_for_comment)
async def process_comment(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—é"""
    comment = message.text.strip()
    if comment.lower() == "–Ω–µ—Ç":
        comment = None

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(comment=comment)

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    channel_link = data.get("channel_link")

    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    await message.answer(
        "üßæ <b>–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ</b>\n\n" \
        f"–ö–∞–Ω–∞–ª: <code>{channel_link}</code>\n" \
        f"–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {comment if comment else '‚Äî'}\n\n" \
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ '–¥–∞' –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏–ª–∏ '–Ω–µ—Ç' –¥–ª—è –æ—Ç–º–µ–Ω—ã."
    )
    await state.set_state(ChannelProposalForm.waiting_for_confirmation)


@router.message(ChannelProposalForm.waiting_for_confirmation)
async def process_confirmation(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞"""
    confirmation = message.text.lower().strip()

    if confirmation in ["–¥–∞", "yes", "y"]:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        data = await state.get_data()
        channel_link = data.get("channel_link")
        comment = data.get("comment")

        # –ü–æ–ª—É—á–∞–µ–º Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        telegram_id = message.from_user.id

        async with get_atomic_db() as db:
            user_permissions = await UserService(db).cheek_user_permissions(telegram_id)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º –∏–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
            if user_permissions["is_operator"]:
                # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - –æ–ø–µ—Ä–∞—Ç–æ—Ä, —Å–æ–∑–¥–∞–µ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞ –∏ —Å–∞–º –∫–∞–Ω–∞–ª
                try:
                    from bot.service.channel_service import ChannelService
                    channel_service = ChannelService(db)
                    existing_channel = await channel_service.get_channel_by_filter(invite_link=channel_link)
                    if existing_channel:
                        await message.answer(f"‚ÑπÔ∏è –ö–∞–Ω–∞–ª <code>{channel_link}</code> —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞.")
                    else:
                        channel_username = channel_link.lstrip("@").replace("https://t.me/", "").replace("http://t.me/", "")
                        title = channel_username if channel_username else "Unnamed Channel"
                        invite_link = channel_link if channel_link.startswith("http") else None
                        description = comment
                        new_channel = await channel_service.create_channel(AddChannel(
                            channel_username=channel_username if channel_username else None,
                            title=title,
                            invite_link=invite_link,
                            status="disabled",
                            description=description,
                            is_private=False,
                            last_parsed_message_id=None,
                            last_checked=None)
                        )

                        channel_proposal = await channel_service.add_channel_proposal(AddChannelProposal(
                            channel_id=new_channel.id,
                            channel_username=channel_username if channel_username else None,
                            operator_id=telegram_id,
                            status="pending",
                            comment="",
                            admin_comment=comment
                        ))

                        await notify_admins_about_channel_proposal(message.bot, channel_proposal,
                                                                   message.from_user.username)
                        await message.answer("‚úÖ <b>–ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞</b>\n\n–ö–∞–Ω–∞–ª –ø–µ—Ä–µ–¥–∞–Ω –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.")
                except Exception as e:
                    main_logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–∞–Ω–∞–ª–∞ –∞–¥–º–∏–Ω–æ–º: {e}")
                    await message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            elif user_permissions["is_admin"]:
                # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä, —Å–æ–∑–¥–∞–µ–º —Ç–æ–ª—å–∫–æ —Å–∞–º –∫–∞–Ω–∞–ª
                try:
                    from bot.service.channel_service import ChannelService
                    channel_service = ChannelService(db)
                    existing_channel = await channel_service.get_channel_by_filter(invite_link=channel_link)
                    if existing_channel:
                        await message.answer(f"‚ÑπÔ∏è –ö–∞–Ω–∞–ª <code>{channel_link}</code> —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞.")
                    else:
                        channel_username = channel_link.lstrip("@").replace("https://t.me/", "").replace("http://t.me/", "")
                        title = channel_username if channel_username else "Unnamed Channel"
                        invite_link = channel_link if channel_link.startswith("http") else None
                        description = comment
                        new_channel = await channel_service.create_channel(AddChannel(
                            channel_username=channel_username if channel_username else None,
                            title=title,
                            invite_link=invite_link,
                            status="active",
                            description=description,
                            is_private=False,
                            last_parsed_message_id=None,
                            last_checked=None)
                        )
                        if new_channel:
                            main_logger.info(f"–ö–∞–Ω–∞–ª {channel_link} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º {telegram_id}")
                            await message.answer("‚úÖ –ö–∞–Ω–∞–ª —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞.")
                        else:
                            await message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
                except Exception as e:
                    main_logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–∞–Ω–∞–ª–∞ –∞–¥–º–∏–Ω–æ–º: {e}")
                    await message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            else:
                await message.answer("‚ö†Ô∏è –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–æ–≤.")
    else:
        await message.answer("‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.")

    await state.clear()


async def notify_admins_about_channel_proposal(bot: Bot, proposal, operator_username: str):
    """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º –æ –Ω–æ–≤–æ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–∏ –∫–∞–Ω–∞–ª–∞"""
    try:
        async with get_atomic_db() as db:
            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
            user_service = UserService(db)
            admins = await user_service.get_admins()

            if not admins:
                main_logger.warning("–ù–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–∏ –∫–∞–Ω–∞–ª–∞")
                return

            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∞–≤—Ç–æ—Ä–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
            operator_user = await user_service.get_user_by_filter(telegram_id=proposal.operator_id)
            if operator_user and operator_user.username:
                operator_display = f"@{operator_user.username}"
            else:
                # –§–æ—Ä–º–∏—Ä—É–µ–º –≤–∏–¥–∏–º–æ–µ –∏–º—è –∏ –∫–ª–∏–∫–∞–±–µ–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É
                name_parts = [p for p in [getattr(operator_user, 'first_name', None), getattr(operator_user, 'last_name', None)] if p] if operator_user else []
                visible_name = " ".join(name_parts) if name_parts else "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
                operator_display = f"<a href=\"tg://user?id={proposal.operator_id}\">{visible_name}</a>"

            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            notification_text = (
                "üì¢ <b>–ù–æ–≤–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞</b>\n\n"
                f"–ö–∞–Ω–∞–ª: @{proposal.channel_username}\n"
                f"–ü—Ä–µ–¥–ª–æ–∂–∏–ª: {operator_display}\n"
                f"–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {proposal.comment or '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}\n\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Ä–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ."
            )

            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è/–æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è
            keyboard = get_channel_proposal_keyboard(proposal.id)

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫–∞–∂–¥–æ–º—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
            for admin in admins:
                try:
                    await bot.send_message(
                        chat_id=admin.telegram_id,
                        text=notification_text,
                        reply_markup=keyboard
                    )
                    main_logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–∏ –∫–∞–Ω–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É {admin.telegram_id}")
                except Exception as e:
                    main_logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É {admin.telegram_id}: {str(e)}")
    except Exception as e:
        main_logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º: {str(e)}")


@router.callback_query(F.data.startswith("approve_channel:"))
async def approve_channel_proposal(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"""
    try:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –∏–∑ callback_data
        proposal_id = int(callback.data.split(":")[1])

        async with get_atomic_db() as db:
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
            proposal = await ChannelService(db).approve_channel_proposal(proposal_id)

            if proposal:
                await callback.message.edit_text(
                    f"‚úÖ –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞ @{proposal.channel_username} –æ–¥–æ–±—Ä–µ–Ω–æ.\n–ö–∞–Ω–∞–ª –¥–æ–±–∞–≤–ª–µ–Ω –≤ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥."
                )

                # –£–≤–µ–¥–æ–º–ª—è–µ–º –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ –æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
                try:
                    await callback.bot.send_message(
                        chat_id=proposal.operator_id,
                        text=f"‚úÖ –í–∞—à–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞ @{proposal.channel_username} –æ–¥–æ–±—Ä–µ–Ω–æ."
                    )
                except Exception as e:
                    main_logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä—É {proposal.operator_id}: {str(e)}")
            else:
                await callback.message.edit_text("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è. –í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω–æ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ.")
    except Exception as e:
        main_logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞: {str(e)}")
        await callback.message.edit_text(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è: {str(e)}")
    finally:
        await callback.answer()


@router.callback_query(F.data.startswith("reject_channel:"))
async def reject_channel_proposal(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"""
    try:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –∏–∑ callback_data
        proposal_id = int(callback.data.split(":")[1])

        async with get_atomic_db() as db:
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
            proposal = await ChannelService(db).reject_channel_proposal(proposal_id)

            if proposal:
                await callback.message.edit_text(
                    f"‚ùå –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞ @{proposal.channel_username} –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ."
                )

                # –£–≤–µ–¥–æ–º–ª—è–µ–º –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ –æ–± –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
                try:
                    await callback.bot.send_message(
                        chat_id=proposal.operator_id,
                        text=f"‚ùå –í–∞—à–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞ @{proposal.channel_username} –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ."
                    )
                except Exception as e:
                    main_logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä—É {proposal.operator_id}: {str(e)}")
            else:
                await callback.message.edit_text("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è. –í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω–æ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ.")
    except Exception as e:
        main_logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞: {str(e)}")
        await callback.message.edit_text(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è: {str(e)}")
    finally:
        await callback.answer()
