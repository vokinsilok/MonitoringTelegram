from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, BufferedInputFile, InlineKeyboardMarkup, InlineKeyboardButton
from io import BytesIO
from docx import Document as DocxDocument
from app.core.logging import main_logger
from bot.keyboards.keyboards import get_operator_access_request_keyboard
from bot.service.user_service import UserService
from bot.utils.depend import get_atomic_db
from bot.models.post import PostStatus
from bot.models.user_model import Language, TimeZone
from bot.utils.time_utils import format_dt



router = Router()


def _format_requester_display(user) -> str:
    if getattr(user, "username", None):
        return f"@{user.username}"
    name_parts = [p for p in [getattr(user, 'first_name', None), getattr(user, 'last_name', None)] if p]
    visible_name = " ".join(name_parts) if name_parts else "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
    return f"<a href=\"tg://user?id={user.telegram_id}\">{visible_name}</a>"


def _settings_keyboard(cur_lang: str | None, cur_tz: str | None) -> InlineKeyboardMarkup:
    cur_lang = (cur_lang or Language.RU.value).lower()
    cur_tz = (cur_tz or TimeZone.GMT.value).upper()
    def mark(v: str, cur: str) -> str:
        return ("‚úì " + v) if v.lower() == cur.lower() else v
    langs = [
        InlineKeyboardButton(text=mark("RU", cur_lang), callback_data="set_lang:ru"),
        InlineKeyboardButton(text=mark("EN", cur_lang), callback_data="set_lang:en"),
        InlineKeyboardButton(text=mark("ES", cur_lang), callback_data="set_lang:es"),
        InlineKeyboardButton(text=mark("FR", cur_lang), callback_data="set_lang:fr"),
    ]
    tzs_row1 = [
        InlineKeyboardButton(text=mark("GMT", cur_tz), callback_data="set_tz:GMT"),
        InlineKeyboardButton(text=mark("UTC", cur_tz), callback_data="set_tz:UTC"),
        InlineKeyboardButton(text=mark("MSK", cur_tz), callback_data="set_tz:MSK"),
    ]
    tzs_row2 = [
        InlineKeyboardButton(text=mark("CET", cur_tz), callback_data="set_tz:CET"),
        InlineKeyboardButton(text=mark("EST", cur_tz), callback_data="set_tz:EST"),
        InlineKeyboardButton(text=mark("PST", cur_tz), callback_data="set_tz:PST"),
        InlineKeyboardButton(text=mark("IST", cur_tz), callback_data="set_tz:IST"),
    ]
    return InlineKeyboardMarkup(inline_keyboard=[langs, tzs_row1, tzs_row2])


@router.message(F.text.in_({"‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏"}))
async def show_settings(message: Message):
    try:
        async with get_atomic_db() as db:
            user = await UserService(db).get_user_by_filter(telegram_id=message.from_user.id)
            if not user:
                await message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
                return
            st = await db.user.get_or_create_settings(user.id)
            text = (
                "‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏</b>\n\n"
                f"–Ø–∑—ã–∫ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞: <b>{st.language.upper()}</b>\n"
                f"–ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å: <b>{st.time_zone}</b>\n\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –Ω–∏–∂–µ."
            )
            kb = _settings_keyboard(st.language, st.time_zone)
            await message.answer(text, reply_markup=kb)
    except Exception as e:
        main_logger.error(f"show_settings error: {e}")
        await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫.")


@router.callback_query(F.data.startswith("set_lang:"))
async def set_language(callback: CallbackQuery):
    lang = callback.data.split(":", 1)[1].lower()
    if lang not in {x.value for x in Language}:
        await callback.answer("–ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π —è–∑—ã–∫", show_alert=False)
        return
    try:
        async with get_atomic_db() as db:
            user = await UserService(db).get_user_by_filter(telegram_id=callback.from_user.id)
            if not user:
                await callback.answer("–ù–µ –Ω–∞–π–¥–µ–Ω", show_alert=False)
                return
            await db.user.update_settings(user.id, {"language": lang})
            st = await db.user.get_settings(user.id)
        try:
            await callback.message.edit_reply_markup(reply_markup=_settings_keyboard(st.language, st.time_zone))
        except Exception:
            pass
        await callback.answer("–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ")
    except Exception as e:
        main_logger.error(f"set_language error: {e}")
        await callback.answer("–û—à–∏–±–∫–∞", show_alert=False)


@router.callback_query(F.data.startswith("set_tz:"))
async def set_time_zone(callback: CallbackQuery):
    tz = callback.data.split(":", 1)[1].upper()
    if tz not in {x.value for x in TimeZone}:
        await callback.answer("–ù–µ–¥–æ–ø—É—Å—Ç–∏–º–∞—è TZ", show_alert=False)
        return
    try:
        async with get_atomic_db() as db:
            user = await UserService(db).get_user_by_filter(telegram_id=callback.from_user.id)
            if not user:
                await callback.answer("–ù–µ –Ω–∞–π–¥–µ–Ω", show_alert=False)
                return
            await db.user.update_settings(user.id, {"time_zone": tz})
            st = await db.user.get_settings(user.id)
        try:
            await callback.message.edit_reply_markup(reply_markup=_settings_keyboard(st.language, st.time_zone))
        except Exception:
            pass
        await callback.answer("–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ")
    except Exception as e:
        main_logger.error(f"set_time_zone error: {e}")
        await callback.answer("–û—à–∏–±–∫–∞", show_alert=False)


@router.message(F.text.in_(
    {"üìä –û—Ç—á–µ—Ç", "üìä –û—Ç—á—ë—Ç", "–û—Ç—á—ë—Ç", "–û—Ç—á–µ—Ç"}
))
async def show_report(message: Message):
    # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –æ–∫–Ω–∞ –æ—Ç—á—ë—Ç–∞ (–º–æ–∂–Ω–æ –≤—ã–Ω–µ—Å—Ç–∏ –≤ –∫–æ–Ω—Ñ–∏–≥)
    within_hours = 24
    try:
        async with get_atomic_db() as db:
            total_channels = await db.channel.count_channels()
            total_keywords = len(await db.keywords.get_all_keywords())
            total_matched_posts = await db.post.count_distinct_posts_with_matches(within_hours)
            processed = await db.post.count_processing_by_status(PostStatus.PROCESSED.value, within_hours)
            postponed = await db.post.count_processing_by_status(PostStatus.POSTPONED.value, within_hours)
            pending = await db.post.count_processing_by_status(PostStatus.PENDING.value, within_hours)

            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞–º
            op_stats_raw = await db.post.get_operator_stats(within_hours)
            op_lines = []
            for op_id, proc_cnt, postp_cnt in op_stats_raw:
                user = await db.user.get_user_by_filter(id=op_id)
                if user and getattr(user, "username", None):
                    display = f"@{user.username}"
                elif user:
                    name_parts = [p for p in [getattr(user, 'first_name', None), getattr(user, 'last_name', None)] if p]
                    visible = " ".join(name_parts) if name_parts else str(user.telegram_id)
                    display = f"<a href=\"tg://user?id={user.telegram_id}\">{visible}</a>"
                else:
                    display = "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
                op_lines.append(f"‚Ä¢ {display}: <b>{proc_cnt}</b> —Ä–∞–∑–æ–±—Ä–∞–Ω–Ω—ã—Ö, <b>{postp_cnt}</b> –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã—Ö")

        # –ö—Ä–∞—Å–∏–≤—ã–π —Ç–µ–∫—Å—Ç –æ—Ç—á—ë—Ç–∞ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
        text = (
            "üìä <b>–û—Ç—á—ë—Ç</b> (–∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞)\n\n"
            f"1. –í—Å–µ–≥–æ –∫–∞–Ω–∞–ª–æ–≤: <b>{total_channels}</b>\n"
            f"2. –í—Å–µ–≥–æ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤: <b>{total_keywords}</b>\n"
            f"3. –ù–∞–π–¥–µ–Ω–æ –ø–æ—Å—Ç–æ–≤ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º: <b>{total_matched_posts}</b>\n"
            f"4. –†–∞–∑–æ–±—Ä–∞–Ω–æ: <b>{processed}</b>\n"
            f"5. –û—Ç–ª–æ–∂–µ–Ω–Ω–æ: <b>{postponed}</b>\n"
            f"6. –û–∂–∏–¥–∞—é—â–∏–µ —Ä–∞–∑–±–æ—Ä–∞: <b>{pending}</b>\n\n"
            "üë§ <b>–û–ø–µ—Ä–∞—Ç–æ—Ä—ã, —Ä–∞–∑–±–∏—Ä–∞–≤—à–∏–µ –∏–Ω—Ü–∏–¥–µ–Ω—Ç—ã:</b>\n"
            + ("\n".join(op_lines) if op_lines else "‚Äî")
        )
        await message.answer(text, disable_web_page_preview=True)

        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ–¥—Ä–æ–±–Ω–æ–≥–æ –æ—Ç—á—ë—Ç–∞ DOCX (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–∞ –±–∏–±–ª–∏–æ—Ç–µ–∫–∞)
        if DocxDocument is None:
            await message.answer("‚ö†Ô∏è –ü–æ–¥—Ä–æ–±–Ω—ã–π .docx –æ—Ç—á—ë—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (–±–∏–±–ª–∏–æ—Ç–µ–∫–∞ python-docx –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞).")
            return

        try:
            async with get_atomic_db() as db:
                posts = await db.post.get_recent_matched_posts(within_hours)
                # –ø–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–Ω–∏—Ü–∏–∞—Ç–æ—Ä–∞ –æ—Ç—á—ë—Ç–∞
                user = await UserService(db).get_user_by_filter(telegram_id=message.from_user.id)
                user_tz = None
                if user:
                    st = await db.user.get_or_create_settings(user.id)
                    user_tz = st.time_zone

            doc = DocxDocument()
            doc.add_heading("–û—Ç—á—ë—Ç –ø–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥—É Telegram", level=0)
            doc.add_paragraph(f"–ü–µ—Ä–∏–æ–¥: –ø–æ—Å–ª–µ–¥–Ω–∏–µ {within_hours} —á.")
            doc.add_paragraph("")
            doc.add_paragraph(f"–í—Å–µ–≥–æ –∫–∞–Ω–∞–ª–æ–≤: {total_channels}")
            doc.add_paragraph(f"–í—Å–µ–≥–æ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤: {total_keywords}")
            doc.add_paragraph(f"–ù–∞–π–¥–µ–Ω–æ –ø–æ—Å—Ç–æ–≤ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º: {total_matched_posts}")
            doc.add_paragraph(f"–†–∞–∑–æ–±—Ä–∞–Ω–æ: {processed}")
            doc.add_paragraph(f"–û—Ç–ª–æ–∂–µ–Ω–Ω–æ: {postponed}")
            doc.add_paragraph(f"–û–∂–∏–¥–∞—é—â–∏–µ —Ä–∞–∑–±–æ—Ä–∞: {pending}")

            doc.add_heading("–û–ø–µ—Ä–∞—Ç–æ—Ä—ã", level=1)
            if op_lines:
                for line in op_lines:
                    # –£–±–µ—Ä—ë–º HTML –∏–∑ docx-–≤–µ—Ä—Å–∏–∏
                    plain = (
                        line.replace("<b>", "").replace("</b>", "")
                            .replace("<a href=\"tg://user?id=", "").replace("\">", " ")
                            .replace("</a>", "")
                    )
                    doc.add_paragraph(plain, style="List Bullet")
            else:
                doc.add_paragraph("‚Äî")

            doc.add_heading("–ü–æ–¥—Ä–æ–±–Ω—ã–µ –ø–æ—Å—Ç—ã", level=1)
            for p in posts:
                ch_title = getattr(getattr(p, "channel", None), "title", "–ö–∞–Ω–∞–ª") or "–ö–∞–Ω–∞–ª"
                doc.add_heading(ch_title, level=2)
                doc.add_paragraph(f"–î–∞—Ç–∞: {format_dt(getattr(p, 'published_at', None), user_tz)}")
                if getattr(p, "url", None):
                    doc.add_paragraph(f"–°—Å—ã–ª–∫–∞: {p.url}")
                # –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞
                kw_texts = []
                try:
                    for mk in getattr(p, "matched_keywords", []) or []:
                        if getattr(mk, "keyword", None) and mk.keyword.text:
                            if mk.keyword.text not in kw_texts:
                                kw_texts.append(mk.keyword.text)
                except Exception:
                    pass
                if kw_texts:
                    doc.add_paragraph("–ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞: " + ", ".join(kw_texts))
                # –¢–µ–∫—Å—Ç –ø–æ—Å—Ç–∞
                preview = (p.text or "").strip()
                doc.add_paragraph(preview if preview else "(–±–µ–∑ —Ç–µ–∫—Å—Ç–∞)")
                doc.add_paragraph("")

            bio = BytesIO()
            doc.save(bio)
            bio.seek(0)
            fname = f"report_{within_hours}h.docx"
            file = BufferedInputFile(bio.read(), filename=fname)
            await message.answer_document(file, caption="–ü–æ–¥—Ä–æ–±–Ω—ã–π –æ—Ç—á—ë—Ç")
        except Exception as e:
            main_logger.error(f"show_report docx error: {e}")
            await message.answer("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –æ—Ç—á—ë—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

    except Exception as e:
        main_logger.error(f"show_report error: {e}")
        await message.answer("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –æ—Ç—á—ë—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


@router.message(F.text == "üìù –ü–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞")
async def request_operator_access(message: Message):
    """–û–±—ã—á–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —Ä–æ–ª—å –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞: —É–≤–µ–¥–æ–º–ª—è–µ–º –≤—Å–µ—Ö –∞–¥–º–∏–Ω–æ–≤."""
    try:
        async with get_atomic_db() as db:
            user_service = UserService(db)
            user = await user_service.get_user_by_filter(telegram_id=message.from_user.id)
            if not user:
                await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ /start.")
                return

            admins = await user_service.get_admins()
            if not admins:
                await message.answer("‚ö†Ô∏è –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
                return

            display = _format_requester_display(user)
            text = (
                "üìù <b>–ó–∞–ø—Ä–æ—Å –Ω–∞ –¥–æ—Å—Ç—É–ø –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞</b>\n\n"
                f"–ó–∞–ø—Ä–æ—Å –æ—Ç: {display}\n"
                "–ù–∞–∂–º–∏—Ç–µ, —á—Ç–æ–±—ã –≤—ã–¥–∞—Ç—å –¥–æ—Å—Ç—É–ø –∏–ª–∏ –æ—Ç–∫–ª–æ–Ω–∏—Ç—å."
            )
            kb = get_operator_access_request_keyboard(user.id)

            sent = 0
            for admin in admins:
                try:
                    await message.bot.send_message(admin.telegram_id, text, reply_markup=kb)
                    sent += 1
                except Exception as e:
                    main_logger.error(f"send admin op-access request error to {admin.telegram_id}: {e}")

        if sent:
            await message.answer(
                "‚úÖ <b>–ó–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!</b>\n\n"
                "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –ø–æ–ª—É—á–∏–ª–∏ –≤–∞—à–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ.\n"
                "–í—ã –ø–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ—Å–ª–µ –ø—Ä–∏–Ω—è—Ç–∏—è —Ä–µ—à–µ–Ω–∏—è."
            )
        else:
            await message.answer(
                "‚ùå <b>–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å</b>\n\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π."
            )
    except Exception as e:
        main_logger.error(f"request_operator_access error: {e}")
        await message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


@router.callback_query(F.data.startswith("approve_operator:"))
async def approve_operator(callback: CallbackQuery):
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    async with get_atomic_db() as db:
        perms = await UserService(db).cheek_user_permissions(callback.from_user.id)
        if not perms.get("is_admin"):
            await callback.answer("–ù–µ—Ç –ø—Ä–∞–≤", show_alert=False)
            return

    try:
        user_id = int(callback.data.split(":")[1])
    except Exception:
        await callback.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ", show_alert=False)
        return

    try:
        async with get_atomic_db() as db:
            svc = UserService(db)
            user = await svc.get_user_by_filter(id=user_id)
            if not user:
                await callback.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=False)
                return
            updated = await svc.set_operator(user_id, True)
            # –£–≤–µ–¥–æ–º–ª—è–µ–º —Ü–µ–ª–µ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            try:
                await callback.bot.send_message(
                    chat_id=user.telegram_id,
                    text=(
                        "‚úÖ <b>–î–æ—Å—Ç—É–ø –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ –≤—ã–¥–∞–Ω</b>\n\n"
                        "–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞ –∫–æ–º–∞–Ω–¥–æ–π /start, —á—Ç–æ–±—ã –æ–±–Ω–æ–≤–∏—Ç—å –º–µ–Ω—é."
                    )
                )
            except Exception as e:
                main_logger.error(f"notify user grant operator failed {user.telegram_id}: {e}")
    except Exception as e:
        main_logger.error(f"approve_operator error: {e}")
        await callback.answer("–û—à–∏–±–∫–∞", show_alert=False)
        return

    try:
        await callback.message.edit_text("‚úÖ –ó–∞–ø—Ä–æ—Å –æ–±—Ä–∞–±–æ—Ç–∞–Ω: –¥–æ—Å—Ç—É–ø –≤—ã–¥–∞–Ω.")
    except Exception:
        pass
    await callback.answer()


@router.callback_query(F.data.startswith("reject_operator:"))
async def reject_operator(callback: CallbackQuery):
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    async with get_atomic_db() as db:
        perms = await UserService(db).cheek_user_permissions(callback.from_user.id)
        if not perms.get("is_admin"):
            await callback.answer("–ù–µ—Ç –ø—Ä–∞–≤", show_alert=False)
            return

    try:
        user_id = int(callback.data.split(":")[1])
    except Exception:
        await callback.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ", show_alert=False)
        return

    try:
        async with get_atomic_db() as db:
            svc = UserService(db)
            user = await svc.get_user_by_filter(id=user_id)
            if not user:
                await callback.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=False)
                return
            # –ú–æ–∂–Ω–æ —É–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            try:
                await callback.bot.send_message(
                    chat_id=user.telegram_id,
                    text="‚ùå –í–∞—à –∑–∞–ø—Ä–æ—Å –Ω–∞ –¥–æ—Å—Ç—É–ø –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ –æ—Ç–∫–ª–æ–Ω—ë–Ω."
                )
            except Exception as e:
                main_logger.error(f"notify user reject operator failed {user.telegram_id}: {e}")
    except Exception as e:
        main_logger.error(f"reject_operator error: {e}")
        await callback.answer("–û—à–∏–±–∫–∞", show_alert=False)
        return

    try:
        await callback.message.edit_text("‚ùå –ó–∞–ø—Ä–æ—Å –æ—Ç–∫–ª–æ–Ω—ë–Ω.")
    except Exception:
        pass
    await callback.answer()


@router.message(F.text == "üí¨ –û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å")
async def show_feedback(message: Message):
    text = (
        "üí¨ <b>–û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å</b>\n\n"
        "–°–≤—è–∑—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π:\n"
        "‚Ä¢ Telegram: <a href=\"https://t.me/support\">@support</a>\n"
        "‚Ä¢ Email: <code>support@example.com</code>\n\n"
        "üïò –ì—Ä–∞—Ñ–∏–∫: –ø–Ω‚Äì–ø—Ç, 10:00‚Äì19:00 (–ú–°–ö)"
    )
    await message.answer(text)


@router.message(F.text.in_({"‚ùì–û —Å–∏—Å—Ç–µ–º–µ", "‚ùì –û —Å–∏—Å—Ç–µ–º–µ"}))
async def about_system(message: Message):
    text = (
        "‚ùì <b>–û —Å–∏—Å—Ç–µ–º–µ</b>\n\n"
        "–°–∏—Å—Ç–µ–º–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ Telegram‚Äë–∫–∞–Ω–∞–ª–æ–≤ –ø–æ–º–æ–≥–∞–µ—Ç –∫–æ–º–∞–Ω–¥–µ –æ–ø–µ—Ä–∞—Ç–∏–≤–Ω–æ —Ä–∞–±–æ—Ç–∞—Ç—å —Å –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º:\n\n"
        "‚Ä¢ üì¢ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏ –º–æ–¥–µ—Ä–∞—Ü–∏—è –∫–∞–Ω–∞–ª–æ–≤.\n"
        "‚Ä¢ üîç –ü–æ–∏—Å–∫ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º (–ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤, –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞–º–∏).\n"
        "‚Ä¢ üë§ –†–æ–ª–∏ –∏ –ø—Ä–∞–≤–∞: –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –∏ –æ–ø–µ—Ä–∞—Ç–æ—Ä.\n"
        "‚Ä¢ üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∏ —É–¥–æ–±–Ω—ã–µ –ø–∞–Ω–µ–ª–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä—è–º–æ –≤ —á–∞—Ç–µ.\n\n"
        "üí° –ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å ‚Äî –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–∞–º–∏ –º–µ–Ω—é –Ω–∏–∂–µ."
    )
    await message.answer(text)
