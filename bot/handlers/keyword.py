from aiogram import Router, F
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import Message, CallbackQuery

from app.core.logging import main_logger
from bot.keyboards.keyboards import get_channel_proposal_keyboard, get_keyword_proposal_keyboard
from bot.models.keyword import KeywordType
from bot.schemas.keyword_schema import KeyWordProposalCreateSchema, KeyWordProposalSchema
from bot.service.keywords_service import KeyWordsService
from bot.service.user_service import UserService
from bot.utils.depend import get_atomic_db

router = Router()


class KeywordProposalForm(StatesGroup):
    """–°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Ñ–æ—Ä–º—ã –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –∫–ª—é—á–µ–≤–æ–≥–æ —Å–ª–æ–≤–∞"""
    waiting_for_keyword = State()
    waiting_for_comment = State()
    waiting_for_confirmation = State()


@router.message(F.text.startswith("üîç –ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ"))
async def cmd_propose_channel(message: Message, state: FSMContext):
    """–ù–∞—á–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞"""
    await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ, –∫–æ—Ç–æ—Ä–æ–µ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å:")
    await state.set_state(KeywordProposalForm.waiting_for_keyword)


@router.message(KeywordProposalForm.waiting_for_keyword)
async def process_keyword(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –ø–æ–ª—É—á–µ–Ω–Ω–æ–µ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ"""
    await state.update_data(keyword=message.text)
    await message.answer(
        "–°–ø–∞—Å–∏–±–æ! –¢–µ–ø–µ—Ä—å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∏–ª–∏ –ø—Ä–∏—á–∏–Ω—É, –ø–æ—á–µ–º—É –≤—ã –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç–µ —ç—Ç–æ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ:")
    await state.set_state(KeywordProposalForm.waiting_for_comment)


@router.message(KeywordProposalForm.waiting_for_comment)
async def process_comment(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –ø–æ–ª—É—á–µ–Ω–Ω—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π"""
    await state.update_data(comment=message.text)
    data = await state.get_data()
    keyword = data['keyword']
    comment = data['comment']

    await message.answer(
        f"–í—ã –ø—Ä–µ–¥–ª–æ–∂–∏–ª–∏ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ: {keyword}\n"
        f"–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {comment}\n\n"
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –≤–∞—à–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ (–¥–∞/–Ω–µ—Ç):"
    )
    await state.set_state(KeywordProposalForm.waiting_for_confirmation)


@router.message(KeywordProposalForm.waiting_for_confirmation)
async def process_confirmation(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è"""
    if message.text.lower() in ["–¥–∞", "yes"]:
        data = await state.get_data()
        keyword = data['keyword']
        comment = data['comment']
        operator_id = int(message.from_user.id) if message.from_user.id else None


        try:
            async with get_atomic_db() as db:
                user = await UserService(db).get_user_by_filter(telegram_id=operator_id)
                data = KeyWordProposalCreateSchema(
                    keyword_id=None,
                    operator_id=user.id,
                    text=str(keyword),
                    type=KeywordType.WORD,
                    status="pending",
                    comment=comment,
                    admin_comment=None
                )
                keyword_service = KeyWordsService(db)
                keyword_proposal = await keyword_service.create_keyword_proposal(data)
            if keyword_proposal:
                await message.answer("–°–ø–∞—Å–∏–±–æ! –í–∞—à–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –±—ã–ª–æ –ø—Ä–∏–Ω—è—Ç–æ.")
            else:
                await message.answer(
                    "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –ø–æ–∑–∂–µ.")
            main_logger.debug(f"keyword_proposal: {keyword_proposal}")
        except Exception as e:
            main_logger.error(f"Error creating keyword proposal: {e}")
            await message.answer(
                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –ø–æ–∑–∂–µ.")
    else:
        await message.answer("–í–∞—à–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –±—ã–ª–æ –æ—Ç–º–µ–Ω–µ–Ω–æ.")

    await state.clear()


async def notify_admins_about_keyword_proposal(self, keyword: KeyWordProposalSchema):
    """–£–≤–µ–¥–æ–º–ª—è–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –æ –Ω–æ–≤–æ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–∏ –∫–ª—é—á–µ–≤–æ–≥–æ —Å–ª–æ–≤–∞"""
    try:
        async with get_atomic_db() as db:
            user_service = UserService(db)
            admins = await user_service.get_admins()
            if not admins:
                main_logger.warning("No admins found to notify about keyword proposal.")
                return
            keyboards = get_keyword_proposal_keyboard(keyword.keyword_id)
            for admin in admins:
                await self.bot.send_message(
                    chat_id=admin.id,
                    text=(
                        f"üì¢ –ù–æ–≤–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –∫–ª—é—á–µ–≤–æ–≥–æ —Å–ª–æ–≤–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {keyword.operator_id}:\n"
                        f"–ö–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ: {keyword.text}\n"
                        f"–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {keyword.comment}\n"
                        f"–°—Ç–∞—Ç—É—Å: {keyword.status}"
                    ),
                    keyboards=keyboards
                )
    except Exception as e:
        main_logger.error(f"Error creating keyword proposal: {e}")


@router.callback_query(F.data.startswith("approve_keyword:"))
async def approve_keyword_proposal(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"""
    try:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –∏–∑ callback_data
        proposal_id = int(callback.data.split(":")[1])
        admin_user_id = callback.from_user.id

        async with get_atomic_db() as db:
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
            proposal = await KeyWordsService(db).approve_keyword_proposal(proposal_id,
                                                                          admin_comment="Approved by admin")

            if proposal:
                await callback.message.edit_text(
                    f"‚úÖ –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞ @{proposal.channel_username} –æ–¥–æ–±—Ä–µ–Ω–æ.\n"
                    f"–ö–∞–Ω–∞–ª –¥–æ–±–∞–≤–ª–µ–Ω –≤ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥."
                )

                # –£–≤–µ–¥–æ–º–ª—è–µ–º –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ –æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
                try:
                    await callback.bot.send_message(
                        chat_id=proposal.operator_id,
                        text=f"‚úÖ –í–∞—à–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞ @{proposal.channel_username} –±—ã–ª–æ –æ–¥–æ–±—Ä–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º."
                    )
                except Exception as e:
                    main_logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä—É {proposal.operator_id}: {str(e)}")
            else:
                await callback.message.edit_text(
                    "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è. –í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω–æ —É–∂–µ –±—ã–ª–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ.")
    except Exception as e:
        main_logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞: {str(e)}")
        await callback.message.edit_text(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è: {str(e)}")
    finally:
        await callback.answer()


@router.callback_query(F.data.startswith("reject_channel:"))
async def reject_channel_proposal(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"""

    try:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –∏–∑ callback_data
        proposal_id = int(callback.data.split(":")[1])
        admin_user_id = callback.from_user.id

        async with get_atomic_db() as db:
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
            proposal = await KeyWordsService(db).reject_keyword_proposal(proposal_id, admin_comment="Rejected by admin")

            if proposal:
                await callback.message.edit_text(
                    f"‚ùå –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞ @{proposal.channel_username} –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ.\n"
                    f"–ö–∞–Ω–∞–ª –Ω–µ –±—ã–ª –¥–æ–±–∞–≤–ª–µ–Ω –≤ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥."
                )

                # –£–≤–µ–¥–æ–º–ª—è–µ–º –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ –æ–± –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
                try:
                    await callback.bot.send_message(
                        chat_id=proposal.operator_id,
                        text=f"‚ùå –í–∞—à–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞ @{proposal.channel_username} –±—ã–ª–æ –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º."
                    )
                except Exception as e:
                    main_logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä—É {proposal.operator_id}: {str(e)}")
            else:
                await callback.message.edit_text(
                    "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è. –í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω–æ —É–∂–µ –±—ã–ª–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ.")
    except Exception as e:
        main_logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞: {str(e)}")
        await callback.message.edit_text(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è: {str(e)}")
