from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.exceptions import TelegramBadRequest

from app.core.logging import main_logger
from bot.service.user_service import UserService
from bot.utils.depend import get_atomic_db

router = Router()

PAGE_SIZE = 8


def _build_ops_keyboard(users, page: int, has_next: bool) -> InlineKeyboardMarkup:
    rows = []
    for u in users:
        # –¢–µ–∫—Å—Ç –Ω–∞ –∫–Ω–æ–ø–∫–µ: —Ç–µ–≥, –∏–Ω–∞—á–µ –∏–º—è (–±–µ–∑ –ø–æ–∫–∞–∑–∞ ID)
        if u.username:
            btn_title = f"@{u.username}"
        else:
            name_parts = [p for p in [getattr(u, 'first_name', None), getattr(u, 'last_name', None)] if p]
            btn_title = " ".join(name_parts) if name_parts else "–ë–µ–∑ —Ç–µ–≥–∞"
        op_flag = "‚úÖ" if u.is_operator else "‚ùå"
        act_flag = "‚úÖ" if u.is_active else "‚ùå"
        rows.append([
            InlineKeyboardButton(text=btn_title, callback_data=f"ops:none:{u.id}:{page}"),
        ])
        rows.append([
            InlineKeyboardButton(text=f"–û–ø–µ—Ä–∞—Ç–æ—Ä {op_flag}", callback_data=f"ops:toggle_op:{u.id}:{page}"),
            InlineKeyboardButton(text=f"–ê–∫—Ç–∏–≤–µ–Ω {act_flag}", callback_data=f"ops:toggle_active:{u.id}:{page}"),
        ])
    nav = []
    if page > 1:
        nav.append(InlineKeyboardButton(text="‚óÄÔ∏è", callback_data=f"ops:list:{page-1}"))
    nav.append(InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data=f"ops:list:{page}"))
    if has_next:
        nav.append(InlineKeyboardButton(text="‚ñ∂Ô∏è", callback_data=f"ops:list:{page+1}"))
    if nav:
        rows.append(nav)
    return InlineKeyboardMarkup(inline_keyboard=rows or [[InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data=f"ops:list:{page}")]])


async def _render_ops_page(message_or_cb, page: int):
    async with get_atomic_db() as db:
        user_service = UserService(db)
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞
        actor_tg_id = message_or_cb.from_user.id
        perms = await user_service.cheek_user_permissions(actor_tg_id)
        if not perms.get("is_admin"):
            text = "–ù–µ—Ç –ø—Ä–∞–≤."
            if isinstance(message_or_cb, Message):
                await message_or_cb.answer(text)
            else:
                try:
                    await message_or_cb.message.edit_text(text)
                except TelegramBadRequest:
                    pass
                await message_or_cb.answer()
            return

        # –ë–µ—Ä–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–∫—Ä–æ–º–µ –∞–¥–º–∏–Ω–æ–≤)
        users = await user_service.list_users(page=page, per_page=PAGE_SIZE)
        users = [u for u in users if not u.is_admin]
        has_next = len(await user_service.list_users(page=page+1, per_page=PAGE_SIZE)) > 0

    if not users:
        text = "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã."
        kb = _build_ops_keyboard([], page, has_next=False)
    else:
        lines = ["üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞–º–∏", f"–°—Ç—Ä. {page}", ""]
        for u in users:
            if u.username:
                display = f"@{u.username}"
            else:
                name_parts = [p for p in [getattr(u, 'first_name', None), getattr(u, 'last_name', None)] if p]
                visible_name = " ".join(name_parts) if name_parts else "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
                # –ö–ª–∏–∫–∞–±–µ–ª—å–Ω–æ–µ —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ –±–µ–∑ –ø–æ–∫–∞–∑–∞ ID –≤ —Ç–µ–∫—Å—Ç–µ
                display = f"<a href=\"tg://user?id={u.telegram_id}\">{visible_name}</a>"
            role = "operator" if u.is_operator else "user"
            act = "‚úÖ" if u.is_active else "‚ùå"
            lines.append(f"‚Ä¢ {display} | —Ä–æ–ª—å: {role} | –∞–∫—Ç–∏–≤–µ–Ω: {act}")
        text = "\n".join(lines)
        kb = _build_ops_keyboard(users, page, has_next)

    if isinstance(message_or_cb, Message):
        await message_or_cb.answer(text, reply_markup=kb)
    else:
        try:
            await message_or_cb.message.edit_text(text, reply_markup=kb)
        except TelegramBadRequest as e:
            if "message is not modified" in str(e):
                try:
                    await message_or_cb.message.edit_reply_markup(reply_markup=kb)
                except TelegramBadRequest:
                    pass
            else:
                main_logger.error(f"edit_text error: {e}")
        finally:
            await message_or_cb.answer()


@router.message(F.text.startswith("üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞–º–∏"))
async def manage_ops(message: Message):
    if not UserService.cheek_user_permissions_static(message.from_user.id, "admin"):
        await message.answer("‚ö†Ô∏è <b>–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤</b>\n\n–≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ admin.")
        return
    await _render_ops_page(message, page=1)


@router.callback_query(F.data.startswith("ops:list:"))
async def ops_list(callback: CallbackQuery):
    try:
        page = int(callback.data.split(":")[2])
    except Exception:
        page = 1
    await _render_ops_page(callback, page=page)


@router.callback_query(F.data.startswith("ops:toggle_op:"))
async def toggle_operator(callback: CallbackQuery):
    try:
        _, _, user_id_str, page_str = callback.data.split(":")
        user_id = int(user_id_str)
        page = int(page_str)
    except Exception:
        await callback.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ", show_alert=False)
        return

    try:
        async with get_atomic_db() as db:
            svc = UserService(db)
            user = await svc.get_user_by_filter(id=user_id)
            if not user:
                await callback.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=False)
                return
            # –ò–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º
            make_operator = not bool(user.is_operator)
            await svc.set_operator(user_id, make_operator)
    except Exception as e:
        main_logger.error(f"toggle_operator error: {e}")
        await callback.answer("–û—à–∏–±–∫–∞", show_alert=False)
        return

    await _render_ops_page(callback, page=page)


@router.callback_query(F.data.startswith("ops:toggle_active:"))
async def toggle_active(callback: CallbackQuery):
    try:
        _, _, user_id_str, page_str = callback.data.split(":")
        user_id = int(user_id_str)
        page = int(page_str)
    except Exception:
        await callback.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ", show_alert=False)
        return

    try:
        async with get_atomic_db() as db:
            svc = UserService(db)
            user = await svc.get_user_by_filter(id=user_id)
            if not user:
                await callback.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=False)
                return
            await svc.set_active(user_id, not bool(user.is_active))
    except Exception as e:
        main_logger.error(f"toggle_active error: {e}")
        await callback.answer("–û—à–∏–±–∫–∞", show_alert=False)
        return

    await _render_ops_page(callback, page=page)
