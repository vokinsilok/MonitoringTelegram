from aiogram import Router, F
from aiogram.types import CallbackQuery
from datetime import datetime

from app.core.logging import main_logger
from bot.models.post import PostStatus
from bot.utils.depend import get_atomic_db

router = Router()


async def _cleanup_other_notifications(bot, post_id: int, exclude_pp_id: int):
    async with get_atomic_db() as db:
        siblings = await db.post.get_siblings_processings(post_id, exclude_pp_id)
    for s in siblings:
        if s.notify_chat_id and s.notify_message_id:
            try:
                await bot.delete_message(chat_id=s.notify_chat_id, message_id=s.notify_message_id)
            except Exception as e:
                main_logger.warning(f"delete notify message failed chat={s.notify_chat_id} msg={s.notify_message_id}: {e}")


def _split_chunks(text: str, size: int = 4000):
    for i in range(0, len(text), size):
        yield text[i:i + size]


@router.callback_query(F.data.startswith("show_full:"))
async def cb_show_full(callback: CallbackQuery):
    try:
        post_id = int(callback.data.split(":")[1])
    except Exception:
        await callback.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ", show_alert=False)
        return

    async with get_atomic_db() as db:
        post = await db.post.get(post_id)
    if not post:
        await callback.answer("–ü–æ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=False)
        return

    # –ü—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º html_text, –µ—Å–ª–∏ –µ—Å—Ç—å. –ò–Ω–∞—á–µ ‚Äî –æ–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç, –æ—Ç–∫–ª—é—á–∞—è parse_mode.
    header = "üìÑ –ü–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç –ø–æ—Å—Ç–∞\n"
    if getattr(post, "url", None):
        header += f"–°—Å—ã–ª–∫–∞: {post.url}\n\n"

    try:
        if getattr(post, "html_text", None):
            text = post.html_text
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∫ HTML, —Ä–∞–∑–æ–±—å—ë–º –ø–æ —á–∞—Å—Ç—è–º
            first = True
            for chunk in _split_chunks(text, 3500):
                await callback.message.answer((header if first else "") + chunk)
                first = False
        elif getattr(post, "text", None):
            text = post.text
            first = True
            for chunk in _split_chunks(text, 4000):
                # –û—Ç–∫–ª—é—á–∞–µ–º parse_mode –¥–ª—è —Å—ã—Ä—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π, —á—Ç–æ–±—ã –Ω–µ –ª–æ–º–∞—Ç—å —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª—ã
                await callback.message.bot.send_message(
                    chat_id=callback.message.chat.id,
                    text=(header if first else "") + chunk,
                    parse_mode=None,
                    disable_web_page_preview=True,
                )
                first = False
        else:
            await callback.answer("–¢–µ–∫—Å—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç", show_alert=False)
            return
    except Exception as e:
        main_logger.error(f"show_full send error: {e}")
        await callback.answer("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏", show_alert=False)
        return

    await callback.answer()


@router.callback_query(F.data.startswith("processed:"))
async def cb_processed(callback: CallbackQuery):
    try:
        pp_id = int(callback.data.split(":")[1])
    except Exception:
        await callback.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ", show_alert=False)
        return

    async with get_atomic_db() as db:
        # CAS: —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—â—ë pending
        updated = await db.post.cas_update_processing_status(pp_id, PostStatus.PROCESSED.value)
        if not updated:
            await callback.answer("–£–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ/–æ—Ç–ª–æ–∂–µ–Ω–æ", show_alert=False)
            return
        post_id = updated.post_id

    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è —É –æ—Å—Ç–∞–ª—å–Ω—ã—Ö
    await _cleanup_other_notifications(callback.bot, post_id, pp_id)

    # –í—Å–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–º –ø–æ —ç—Ç–æ–º—É –ø–æ—Å—Ç—É –ø—Ä–æ—Å—Ç–∞–≤–ª—è–µ–º IGNORED
    async with get_atomic_db() as db:
        try:
            await db.post.bulk_update_status_for_post(post_id, PostStatus.IGNORED.value, exclude_pp_id=pp_id)
        except Exception as e:
            main_logger.error(f"bulk update status to IGNORED failed: {e}")

    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –¥–µ–π—Å—Ç–≤–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    try:
        await callback.message.edit_text("‚úÖ –û—Ç–º–µ—á–µ–Ω–æ –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ")
    except Exception:
        pass
    await callback.answer()


@router.callback_query(F.data.startswith("postponed:"))
async def cb_postponed(callback: CallbackQuery):
    try:
        pp_id = int(callback.data.split(":")[1])
    except Exception:
        await callback.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ", show_alert=False)
        return

    async with get_atomic_db() as db:
        updated = await db.post.cas_update_processing_status(pp_id, PostStatus.POSTPONED.value)
        if not updated:
            await callback.answer("–£–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ/–æ—Ç–ª–æ–∂–µ–Ω–æ", show_alert=False)
            return
        post_id = updated.post_id

    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è —É –æ—Å—Ç–∞–ª—å–Ω—ã—Ö
    await _cleanup_other_notifications(callback.bot, post_id, pp_id)

    # –í—Å–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–º –ø–æ —ç—Ç–æ–º—É –ø–æ—Å—Ç—É –ø—Ä–æ—Å—Ç–∞–≤–ª—è–µ–º IG–ù–ûRED
    async with get_atomic_db() as db:
        try:
            await db.post.bulk_update_status_for_post(post_id, PostStatus.IGNORED.value, exclude_pp_id=pp_id)
        except Exception as e:
            main_logger.error(f"bulk update status to IGNORED failed: {e}")

    try:
        await callback.message.edit_text("‚è∏ –û—Ç–ª–æ–∂–µ–Ω–æ")
    except Exception:
        pass
    await callback.answer()
